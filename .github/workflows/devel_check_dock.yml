name: Devel R CMD check and Docker

on:
  push:
    paths:
      - 'DESCRIPTION'
      - '**.yml'
    branches:
      - devel

jobs:
  check:
    runs-on: ubuntu-22.04
    container: bioconductor/bioconductor_docker:devel

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      CRAN: https://packagemanager.posit.co/cran/__linux__/jammy/latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Query dependencies
        run: |
          BiocManager::install(c("covr", "BiocCheck"))
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v3
        with:
          path: /usr/local/lib/R/site-library
          key: ${{ runner.os }}-r-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-r-1-

      - name: Install Dependencies
        run: |
          remotes::install_deps(dependencies = TRUE, repos = BiocManager::repositories())
          BiocManager::install(ask = FALSE, update = TRUE)
        shell: Rscript {0}

      - name: Check Package
        id: rcmdcheck
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual"), error_on = "error", check_dir = "check")
        shell: Rscript {0}

      - name: Test coverage
        run: covr::codecov(quiet = FALSE)
        shell: Rscript {0}

      - name: Run BiocCheck
        id: bioccheck
        run: |
          BiocCheck::BiocCheck(
              dir('check', 'tar.gz$', full.names = TRUE),
              `quit-with-status` = TRUE, `no-check-bioc-help` = TRUE
          )
        shell: Rscript {0}

  dock:
    runs-on: ubuntu-22.04
    needs: check
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Register repo name
        id: reg_repo_name
        run: |
          echo CONT_IMG_NAME=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker
        if: ${{ success() }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./inst/docker/pkg/Dockerfile
          push: true
          tags: >
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.CONT_IMG_NAME }}:latest,
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.CONT_IMG_NAME }}:devel
